// Create database tables
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: 'postgresql://postgres:Contact@123@db.yjynnclmzueqxitqszdt.supabase.co:5432/postgres',
  ssl: {
    rejectUnauthorized: false
  }
});

async function createTables() {
  try {
    console.log('üèóÔ∏è Creating database tables...');
    const client = await pool.connect();
    
    // Create visitors table
    await client.query(`
      CREATE TABLE IF NOT EXISTS public.visitors (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name TEXT NOT NULL,
        phone TEXT NOT NULL,
        opted_in BOOLEAN DEFAULT TRUE,
        source TEXT,
        notes TEXT,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);
    console.log('‚úÖ Created visitors table');
    
    // Create message_logs table
    await client.query(`
      CREATE TABLE IF NOT EXISTS public.message_logs (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        visitor_id BIGINT REFERENCES public.visitors(id) ON DELETE SET NULL,
        channel TEXT,
        action TEXT,
        body TEXT,
        admin TEXT,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);
    console.log('‚úÖ Created message_logs table');
    
    // Create indexes
    await client.query('CREATE INDEX IF NOT EXISTS idx_visitors_phone ON public.visitors(phone)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_visitors_created_at ON public.visitors(created_at)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_message_logs_visitor_id ON public.message_logs(visitor_id)');
    console.log('‚úÖ Created indexes');
    
    // Enable RLS
    await client.query('ALTER TABLE public.visitors ENABLE ROW LEVEL SECURITY');
    await client.query('ALTER TABLE public.message_logs ENABLE ROW LEVEL SECURITY');
    console.log('‚úÖ Enabled Row Level Security');
    
    // Create policies
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public read access to visitors" ON public.visitors
        FOR SELECT USING (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public insert access to visitors" ON public.visitors
        FOR INSERT WITH CHECK (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public update access to visitors" ON public.visitors
        FOR UPDATE USING (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public delete access to visitors" ON public.visitors
        FOR DELETE USING (true)
    `);
    console.log('‚úÖ Created RLS policies for visitors');
    
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public read access to message_logs" ON public.message_logs
        FOR SELECT USING (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public insert access to message_logs" ON public.message_logs
        FOR INSERT WITH CHECK (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public update access to message_logs" ON public.message_logs
        FOR UPDATE USING (true)
    `);
    await client.query(`
      CREATE POLICY IF NOT EXISTS "Allow public delete access to message_logs" ON public.message_logs
        FOR DELETE USING (true)
    `);
    console.log('‚úÖ Created RLS policies for message_logs');
    
    // Insert sample data
    await client.query(`
      INSERT INTO public.visitors (name, phone, opted_in, source, notes) VALUES
        ('John Doe', '+1234567890', true, 'website', 'Interested in vegetarian options'),
        ('Jane Smith', '+1987654321', true, 'menu', 'Regular customer'),
        ('Mike Johnson', '+1122334455', false, 'walk-in', 'First time visitor')
      ON CONFLICT DO NOTHING
    `);
    console.log('‚úÖ Inserted sample data');
    
    // Verify tables
    const visitorsResult = await client.query('SELECT COUNT(*) as count FROM public.visitors');
    const logsResult = await client.query('SELECT COUNT(*) as count FROM public.message_logs');
    
    console.log('üìä Database setup complete!');
    console.log('Visitors count:', visitorsResult.rows[0].count);
    console.log('Message logs count:', logsResult.rows[0].count);
    
    client.release();
    await pool.end();
  } catch (error) {
    console.error('‚ùå Error creating tables:', error.message);
  }
}

createTables();
